

type
  bst{
  int a;
  bst left;
  bst right;
  }
endtype

decl
  int in,opt;
  bst arr[3];
  bst insert(bst h, int key);
  int inOrder(bst h); 
  int preOrder(bst h);
  int postOrder(bst h);           
enddecl

bst insert(bst h, int key)
{

  begin
    if (h == null) then
		h = alloc();
		write(key);
		if (h == null) then
			write("NO SPACE");
			exit;
		endif;
		h.a = key;
		h.left = null;
		h.right = null;
	
	else if (key < h.a) then
            h.left  = insert(h.left, key);

         else if (key > h.a) then
                 h.right = insert(h.right, key);
              endif;
          endif;
    endif;   
   
    return h;
  end
}

int inOrder(bst h){
     
  begin
    
  if(h!=null) then
     
    in=inOrder(h.left);
    write(h.a);
    in=inOrder(h.right);
  endif;
  return 1;
  end
}

int preOrder(bst h){
     
  begin
    
  if(h!=null) then
    write(h.a);
    in=preOrder(h.left);
    
    in=preOrder(h.right);
  endif;
  return 1;
  end
}

int postOrder(bst h){
     
  begin
    
  if(h!=null) then
    
    in=postOrder(h.left);
    
    in=postOrder(h.right);
    write(h.a);
  endif;
  return 1;
  end
}

int main()
{ 
  decl
  int val,flag;
  bst Root,new;
  enddecl

  begin
    Root = null;
    
	write("Enter num:");
    read(val);

    while(val!=0) do
      Root = insert(Root,val);
      read(val);
    endwhile;
	write("Inorder:");
    in = inOrder(Root);
    
    write(Root.a);
    //in = free(Root);
    val = Root;
    write(val);
    write(Root.a);
    new = alloc();
    val = new;
    write(val);
    write(new.a);
    
	//write("Preorder:");
    //in = preOrder(Root);
	//write("Postorder:");
    //in = postOrder(Root);
  
  return 9;
  end
}


